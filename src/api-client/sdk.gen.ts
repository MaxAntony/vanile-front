// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as ClientOptions, formDataBodySerializer, type TDataShape } from '@hey-api/client-fetch';
import { client as _heyApiClient } from './client.gen';
import type {
  AuthGetProfileData,
  AuthGetProfileResponse,
  AuthSignInData,
  AuthSignInResponse2,
  CashRegisterCloseData,
  CashRegisterGetOpenCashRegisterData,
  CashRegisterGetOpenCashRegisterResponse,
  CashRegisterOpenData,
  CashRegisterRegisterTransactionData,
  ItemCreateData,
  ItemFindAllData,
  ItemFindAllResponse,
  ItemFindOneData,
  ItemRemoveData,
  ItemSearchData,
  ItemSearchResponse,
  ItemUpdateData,
  OrderCreateData,
  OrderCreateResponse,
  OrderFindAllData,
  OrderFindAllResponse,
  OrderFindOneData,
  OrderFindOneResponse,
  OrderRemoveData,
  OrderRemoveResponse,
  OrderUpdateData,
  OrderUpdateResponse,
  UserCreateData,
  UserCreateResponse,
  UserFindAllData,
  UserFindAllResponse,
  UserFindOneData,
  UserRemoveData,
  UserRemoveResponse,
  UserUpdateData,
  UserUpdateResponse,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
};

export const userFindAll = <ThrowOnError extends boolean = false>(options?: Options<UserFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<UserFindAllResponse, unknown, ThrowOnError>({
    url: '/user',
    ...options,
  });
};

export const userCreate = <ThrowOnError extends boolean = false>(options: Options<UserCreateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<UserCreateResponse, unknown, ThrowOnError>({
    url: '/user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const userFindOne = <ThrowOnError extends boolean = false>(options: Options<UserFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/user/{email}',
    ...options,
  });
};

export const userRemove = <ThrowOnError extends boolean = false>(options: Options<UserRemoveData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<UserRemoveResponse, unknown, ThrowOnError>({
    url: '/user/{id}',
    ...options,
  });
};

export const userUpdate = <ThrowOnError extends boolean = false>(options: Options<UserUpdateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<UserUpdateResponse, unknown, ThrowOnError>({
    url: '/user/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const itemFindAll = <ThrowOnError extends boolean = false>(options?: Options<ItemFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<ItemFindAllResponse, unknown, ThrowOnError>({
    url: '/item',
    ...options,
  });
};

/**
 * Create a new product with an image
 */
export const itemCreate = <ThrowOnError extends boolean = false>(options: Options<ItemCreateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    ...formDataBodySerializer,
    url: '/item',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

export const itemSearch = <ThrowOnError extends boolean = false>(options?: Options<ItemSearchData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<ItemSearchResponse, unknown, ThrowOnError>({
    url: '/item/search',
    ...options,
  });
};

export const itemRemove = <ThrowOnError extends boolean = false>(options: Options<ItemRemoveData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    url: '/item/{id}',
    ...options,
  });
};

export const itemFindOne = <ThrowOnError extends boolean = false>(options: Options<ItemFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/item/{id}',
    ...options,
  });
};

export const itemUpdate = <ThrowOnError extends boolean = false>(options: Options<ItemUpdateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/item/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const orderFindAll = <ThrowOnError extends boolean = false>(options?: Options<OrderFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<OrderFindAllResponse, unknown, ThrowOnError>({
    url: '/order',
    ...options,
  });
};

export const orderCreate = <ThrowOnError extends boolean = false>(options: Options<OrderCreateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<OrderCreateResponse, unknown, ThrowOnError>({
    url: '/order',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const orderRemove = <ThrowOnError extends boolean = false>(options: Options<OrderRemoveData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<OrderRemoveResponse, unknown, ThrowOnError>({
    url: '/order/{id}',
    ...options,
  });
};

export const orderFindOne = <ThrowOnError extends boolean = false>(options: Options<OrderFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<OrderFindOneResponse, unknown, ThrowOnError>({
    url: '/order/{id}',
    ...options,
  });
};

export const orderUpdate = <ThrowOnError extends boolean = false>(options: Options<OrderUpdateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<OrderUpdateResponse, unknown, ThrowOnError>({
    url: '/order/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const authSignIn = <ThrowOnError extends boolean = false>(options: Options<AuthSignInData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<AuthSignInResponse2, unknown, ThrowOnError>({
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const authGetProfile = <ThrowOnError extends boolean = false>(options?: Options<AuthGetProfileData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<AuthGetProfileResponse, unknown, ThrowOnError>({
    url: '/auth/profile',
    ...options,
  });
};

export const cashRegisterGetOpenCashRegister = <ThrowOnError extends boolean = false>(
  options: Options<CashRegisterGetOpenCashRegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<CashRegisterGetOpenCashRegisterResponse, unknown, ThrowOnError>({
    url: '/cash-register/open/{userId}',
    ...options,
  });
};

export const cashRegisterOpen = <ThrowOnError extends boolean = false>(options: Options<CashRegisterOpenData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/cash-register/open',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const cashRegisterClose = <ThrowOnError extends boolean = false>(options: Options<CashRegisterCloseData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/cash-register/close',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const cashRegisterRegisterTransaction = <ThrowOnError extends boolean = false>(
  options: Options<CashRegisterRegisterTransactionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/cash-register/transaction',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};
