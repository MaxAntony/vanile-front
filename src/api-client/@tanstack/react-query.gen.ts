// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import {
  authGetProfile,
  authSignIn,
  cashRegisterClose,
  cashRegisterGetOpenCashRegister,
  cashRegisterOpen,
  cashRegisterRegisterTransaction,
  itemCreate,
  itemFindAll,
  itemFindOne,
  itemRemove,
  itemSearch,
  itemUpdate,
  type Options,
  orderCreate,
  orderFindAll,
  orderFindOne,
  orderRemove,
  orderUpdate,
  userCreate,
  userFindAll,
  userFindOne,
  userRemove,
  userUpdate,
} from '../sdk.gen';
import type {
  AuthGetProfileData,
  AuthSignInData,
  AuthSignInResponse2,
  CashRegisterCloseData,
  CashRegisterGetOpenCashRegisterData,
  CashRegisterOpenData,
  CashRegisterRegisterTransactionData,
  ItemCreateData,
  ItemFindAllData,
  ItemFindOneData,
  ItemRemoveData,
  ItemSearchData,
  ItemUpdateData,
  OrderCreateData,
  OrderCreateResponse,
  OrderFindAllData,
  OrderFindOneData,
  OrderRemoveData,
  OrderRemoveResponse,
  OrderUpdateData,
  OrderUpdateResponse,
  UserCreateData,
  UserCreateResponse,
  UserFindAllData,
  UserFindOneData,
  UserRemoveData,
  UserRemoveResponse,
  UserUpdateData,
  UserUpdateResponse,
} from '../types.gen';

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const userFindAllQueryKey = (options?: Options<UserFindAllData>) => [createQueryKey('userFindAll', options)];

export const userFindAllOptions = (options?: Options<UserFindAllData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userFindAll({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userFindAllQueryKey(options),
  });
};

export const userCreateQueryKey = (options: Options<UserCreateData>) => [createQueryKey('userCreate', options)];

export const userCreateOptions = (options: Options<UserCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userCreateQueryKey(options),
  });
};

export const userCreateMutation = (options?: Partial<Options<UserCreateData>>) => {
  const mutationOptions: UseMutationOptions<UserCreateResponse, DefaultError, Options<UserCreateData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await userCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userFindOneQueryKey = (options: Options<UserFindOneData>) => [createQueryKey('userFindOne', options)];

export const userFindOneOptions = (options: Options<UserFindOneData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userFindOne({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: userFindOneQueryKey(options),
  });
};

export const userRemoveMutation = (options?: Partial<Options<UserRemoveData>>) => {
  const mutationOptions: UseMutationOptions<UserRemoveResponse, DefaultError, Options<UserRemoveData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await userRemove({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const userUpdateMutation = (options?: Partial<Options<UserUpdateData>>) => {
  const mutationOptions: UseMutationOptions<UserUpdateResponse, DefaultError, Options<UserUpdateData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await userUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const itemFindAllQueryKey = (options?: Options<ItemFindAllData>) => [createQueryKey('itemFindAll', options)];

export const itemFindAllOptions = (options?: Options<ItemFindAllData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await itemFindAll({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: itemFindAllQueryKey(options),
  });
};

export const itemCreateQueryKey = (options: Options<ItemCreateData>) => [createQueryKey('itemCreate', options)];

export const itemCreateOptions = (options: Options<ItemCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await itemCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: itemCreateQueryKey(options),
  });
};

export const itemCreateMutation = (options?: Partial<Options<ItemCreateData>>) => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ItemCreateData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await itemCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const itemSearchQueryKey = (options?: Options<ItemSearchData>) => [createQueryKey('itemSearch', options)];

export const itemSearchOptions = (options?: Options<ItemSearchData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await itemSearch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: itemSearchQueryKey(options),
  });
};

export const itemRemoveMutation = (options?: Partial<Options<ItemRemoveData>>) => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ItemRemoveData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await itemRemove({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const itemFindOneQueryKey = (options: Options<ItemFindOneData>) => [createQueryKey('itemFindOne', options)];

export const itemFindOneOptions = (options: Options<ItemFindOneData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await itemFindOne({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: itemFindOneQueryKey(options),
  });
};

export const itemUpdateMutation = (options?: Partial<Options<ItemUpdateData>>) => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<ItemUpdateData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await itemUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const orderFindAllQueryKey = (options?: Options<OrderFindAllData>) => [createQueryKey('orderFindAll', options)];

export const orderFindAllOptions = (options?: Options<OrderFindAllData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await orderFindAll({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: orderFindAllQueryKey(options),
  });
};

export const orderCreateQueryKey = (options: Options<OrderCreateData>) => [createQueryKey('orderCreate', options)];

export const orderCreateOptions = (options: Options<OrderCreateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await orderCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: orderCreateQueryKey(options),
  });
};

export const orderCreateMutation = (options?: Partial<Options<OrderCreateData>>) => {
  const mutationOptions: UseMutationOptions<OrderCreateResponse, DefaultError, Options<OrderCreateData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await orderCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const orderRemoveMutation = (options?: Partial<Options<OrderRemoveData>>) => {
  const mutationOptions: UseMutationOptions<OrderRemoveResponse, DefaultError, Options<OrderRemoveData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await orderRemove({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const orderFindOneQueryKey = (options: Options<OrderFindOneData>) => [createQueryKey('orderFindOne', options)];

export const orderFindOneOptions = (options: Options<OrderFindOneData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await orderFindOne({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: orderFindOneQueryKey(options),
  });
};

export const orderUpdateMutation = (options?: Partial<Options<OrderUpdateData>>) => {
  const mutationOptions: UseMutationOptions<OrderUpdateResponse, DefaultError, Options<OrderUpdateData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await orderUpdate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authSignInQueryKey = (options: Options<AuthSignInData>) => [createQueryKey('authSignIn', options)];

export const authSignInOptions = (options: Options<AuthSignInData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authSignIn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authSignInQueryKey(options),
  });
};

export const authSignInMutation = (options?: Partial<Options<AuthSignInData>>) => {
  const mutationOptions: UseMutationOptions<AuthSignInResponse2, DefaultError, Options<AuthSignInData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await authSignIn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authGetProfileQueryKey = (options?: Options<AuthGetProfileData>) => [createQueryKey('authGetProfile', options)];

export const authGetProfileOptions = (options?: Options<AuthGetProfileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authGetProfile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authGetProfileQueryKey(options),
  });
};

export const cashRegisterGetOpenCashRegisterQueryKey = (options: Options<CashRegisterGetOpenCashRegisterData>) => [
  createQueryKey('cashRegisterGetOpenCashRegister', options),
];

export const cashRegisterGetOpenCashRegisterOptions = (options: Options<CashRegisterGetOpenCashRegisterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await cashRegisterGetOpenCashRegister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: cashRegisterGetOpenCashRegisterQueryKey(options),
  });
};

export const cashRegisterOpenQueryKey = (options: Options<CashRegisterOpenData>) => [createQueryKey('cashRegisterOpen', options)];

export const cashRegisterOpenOptions = (options: Options<CashRegisterOpenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await cashRegisterOpen({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: cashRegisterOpenQueryKey(options),
  });
};

export const cashRegisterOpenMutation = (options?: Partial<Options<CashRegisterOpenData>>) => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<CashRegisterOpenData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await cashRegisterOpen({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const cashRegisterCloseQueryKey = (options: Options<CashRegisterCloseData>) => [createQueryKey('cashRegisterClose', options)];

export const cashRegisterCloseOptions = (options: Options<CashRegisterCloseData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await cashRegisterClose({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: cashRegisterCloseQueryKey(options),
  });
};

export const cashRegisterCloseMutation = (options?: Partial<Options<CashRegisterCloseData>>) => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<CashRegisterCloseData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await cashRegisterClose({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const cashRegisterRegisterTransactionQueryKey = (options: Options<CashRegisterRegisterTransactionData>) => [
  createQueryKey('cashRegisterRegisterTransaction', options),
];

export const cashRegisterRegisterTransactionOptions = (options: Options<CashRegisterRegisterTransactionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await cashRegisterRegisterTransaction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: cashRegisterRegisterTransactionQueryKey(options),
  });
};

export const cashRegisterRegisterTransactionMutation = (options?: Partial<Options<CashRegisterRegisterTransactionData>>) => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<CashRegisterRegisterTransactionData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await cashRegisterRegisterTransaction({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
